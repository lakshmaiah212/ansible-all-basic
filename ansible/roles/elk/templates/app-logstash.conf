input {
    kafka {
        bootstrap_servers => "{{kafka_ip}}:9092"
        topics => ["access_logs","error_logs"]
        decorate_events => true
    }
}

filter {
 if [@metadata][kafka][topic] == "access_logs" {

        grok {
                match => { "message" => "%{DATESTAMP:logDate}(#\$#)+%{WORD:req_id}(#\$#)+%{DATA:user}(#\$#)+%{INT:duration}(#\$#)+(?<req_time>[0-9]+)(#\$#)+(?<res_time>[0-9]+)(#\$#)+%{IP:source_ip}(#\$#)+%{DATA:gateway_node}(#\$#)+%{DATA:app_node}(#\$#)+%{WORD:req_method}(#\$#)+%{DATA:req_uri}(#\$#)+%{INT:res_code}(#\$#)+%{DATA:req_agent}(#\$#)+%{DATA:req_body}(#\$#)%{GREEDYDATA:res_body}" }
        }
        truncate {
                length_bytes => 1000
                fields => "res_body"
        }

        mutate {
                convert => {
                        "duration" => "integer"
                        "res_code" => "integer"
                }
                remove_field => [ "message" ]
        }
 } else if [@metadata][kafka][topic] == "error_logs" {

        truncate{
                length_bytes => 750
        }

        grok {
               match => { "message" => ["%{TIME:time} %{DATA:thread} %{DATA:user} %{DATA:req_id} %{DATA:req_uri} %{DATA:log_level} %{DATA:error_class} - %{GREEDYDATA:message}", "%{TIME:time} %{DATA:thread} %{DATA:log_level} %{DATA:error_class} - %{GREEDYDATA:message}", "%{GREEDYDATA:message}"] }
                overwrite => [ "message" ]
        }

       mutate {
                rename => { "message" => "error" }
       }
 }

}



output {
        if [@metadata][kafka][topic] == "error_logs" {
                elasticsearch {
                  hosts => ["{{elasticsearch_ip}}:9200"]
                  index => "error-logs-%{+YYYY.MM.dd}"
                  workers => 1
                }
        } else {
                elasticsearch {
                  hosts => ["{{elasticsearch_ip}}:9200"]
                  index => "access-logs-%{+YYYY.MM.dd}"
                  workers => 1
                }
        }
}